* {
  margin: 0;
  padding: 0;
}
/* todos os elementos (*) não vai ter mais o valor padrão do navegador */

:root {
  /* root é um pseudo-selector */
  --text-color: white;
  /* ao fazer isso, tudo que usar essa váriavel vai usar branco no lugar por exemplo no body *, as bordas, etc... */
  --bg-url: url(./assets/bg-mobile.jpg);
  --stroke-color: rgba(255, 255, 255, 0.5);
  --surface-color: rgba(255, 255, 255, 0.1);
  --surface-color-hover: rgba(255, 255, 255, 0.02);
  --highlight-color: rgba(255, 255, 255, 0.2);
  --switch-bg-url: url(./assets/moon-stars.svg);
}

.light {
  --text-color: black;
  --bg-url: url(./assets/bg-mobile-light.jpg);
  --stroke-color: rgba(0, 0, 0, 0.5);
  --surface-color: rgba(0, 0, 0, 0.05);
  --surface-color-hover: rgba(0, 0, 0, 0.02);
  --highlight-color: rgba(0, 0, 0, 0.1);
  --switch-bg-url: url(./assets/sun.svg);
}

body {
  /*
  background-image: url(./assets/bg-mobile.jpg);
  background-repeat: no-repeat;
  Define que a imagem de fundo não deve se repetir 
  background-position: top center;
  Define a posição da imagem de fundo no centro superior 
  background-size: cover;
  Faz com que a imagem de fundo cubra todo o elemento */

  /* background: color image repeat position/size */
  background: var(--bg-url) no-repeat top center/cover;
}

body * {
  font-family: "Inter", sans-serif;
  color: var(--text-color);
  box-sizing: border-box;
}

#container {
  width: 360px;
  /* ordem:
  margin-top: 56px;
  margin-right: auto;
  margin-bottom: auto;
  margin-left: auto; 
  se tem 1 propriedade aplica para todos os lados
  se tem 2 propriedades aplica para o primeiro valor para o top e bottom e o segundo valor para o right e left
  se tem 3 propriedades vai aplicar o primeiro para o top o segundo para o right e left e o terceiro para o bottom
  se tem 4 propriedades o valor aplica cada um para cada começando pelo top, right, bottom, left*/
  margin: 56px auto 0px;
  padding: 0px 24px;
}
/* Não é necessario colocar a altura (height) fixo, tem que deixar ela fluir, pois toda vez que for colocar algum outro conteudo dentro da div irá aumentar a altura*/

/* profile */
#profile {
  text-align: center;
  /* Todos os elementos filhos inline serão centralizados no pai, se fosse display block o elemento filho não iria ser centralizado */
  padding: 24px;
}

#profile img {
  /* display: block;
  margin: auto; */
  width: 112px;
}
/* Em elemento inline como o img, não da para colocar o margin:auto; entao para transformar em margin auto, voce precisa transformar o elemento em block*/

#profile p {
  font-weight: 500;
  /* por padrão o font size do navegador já é 16px então nao precisa colocar */
  line-height: 24px;
  margin-top: 8px;
}

/* switch */
#switch {
  position: relative;
  /* coloquei esse position no switch para podermos usar propriedades como top, right, left, bottom, dentro apenas do switch e não na pagina inteira. O position: relative; ele vai relativizar o absolute do button*/
  width: 64px;
  /* deixar no mesmo tamanho do track */
  margin: 4px auto;
  /* alinhamento de display block é assim */
}

#switch button {
  width: 32px;
  height: 32px;
  background: white var(--switch-bg-url) no-repeat center;
  border: 0;
  border-radius: 50%;

  position: absolute;
  /* O absolute vai ser relativo ao elemento do switch, porque ele esta recebendo position relative, esse relative não vai modificar muita coisa, não, só vai permitir que qualquer coisa que tiver absoluto dentro dele, no caso o button, fique certinho dentro dele*/
  /* quando eu falo que o posicionamento dele vai ser absolute, automaticamente ele faz uma sobreposição de camadas, o position: absolute libera para nós usar a propriedade z-index que muda os andares*/
  top: 50%;
  left: 0;
  z-index: 1;
  /* imagina que é um "prédio", ai o button e o span ta no andar 1 um em cima do outro ja que são display block e você tem uma visão de cima para baixo conseguindo visualizar todas as camadas desse "prédio", o z-index vai passar para o andar de cima (layer/camada) ai você vai começar a ver como se o button tivesse em cima do span (que no caso é o desenho em cima do track) */
  transform: translateY(-50%);
  /* o eixo Y pode mover o elemento para cima ou para baixo */
  /* alinhamento de absolute */
}

.light #switch button {
  right: 0;
  left: initial;
  /* o left volta para sua maneira inicial */
}

#switch span {
  display: block;
  /* trocou o display para block porque inline não aceita algumas propriedades como a largura*/
  width: 64px;
  height: 24px;
  background: var(--surface-color);
  border: 1px solid var(--stroke-color);
  -webkit-backdrop-filter: blur(4px);
  backdrop-filter: blur(4px);
  border-radius: 9999px;
}

/* Links */
ul {
  list-style: none;
  /* siginifica estilo da lista e none significa nenhum (vai tirar os bullet points)*/
  /* display: flex; */
  /* o flex deixa os elementos dentro da caixa (os elementos da caixa são os li's e a caixa é o ul), de uma maneira flexivel (tentando se encaixar) ele cria uma "linha" no meio do elemento que ele adicionou (o nome dessa linha se chama main como se fosse um plano cartesiano com o x e y) ai se vc quiser alinhar no centro dessa linha (x ou eixo transversal) você usa o align-items e o justify-content alinha no (y ou eixo principal), por padrão o flex-direction já é row que significa linha, ai o column é a coluna*/
  /* flex-direction: column;
  gap: 8px; */
  /* gap coloca espaço ENTRE os elementos */
  display: flex;
  flex-direction: column;
  gap: 16px;
  /* peguei minha ul e cada filho que tem dentro dela (li's) estao recebendo um ajuste flexivel das coisas, como a coluna e o espaço entre eles de 16px*/

  padding: 24px 0;
}

ul li a {
  /* o elemento a (link) ele é display inline (ocupa so o tamanho do elemento) e o flex faz com que ele ocupe o tamanho no #container, por exemplo 360px*/
  display: flex; /*faz sentido pq a borda vai ocupar o width do container em vez so do elemento*/
  flex-direction: row; /*não faz sentido pq por padrão ja é row*/
  gap: 8px; /*não faz sentido, pq não faz diferença nenhuma, porque dentro do a so tem os textos (conteudo/content, que no caso é só um), então não tem como fazer o espaçamento entre os elementos*/
  justify-content: center; /*faz sentido, porque pegou o conteudo e alinhou ao meio*/
  align-items: center;
  /* isso é um alinhamento de display flex */

  padding: 16px 24px;

  background: var(--surface-color);
  border: 1px solid var(--stroke-color);
  /* rgba: red, green, blue e alpha */
  border-radius: 8px;
  backdrop-filter: blur(4px);
  /* da um blur (eu num percebi nenhum) */

  text-decoration: none;
  /* tira a linha que fica em baixo */
  font-weight: 500;

  transition: background 0.2s;
  /* transição para o hover para não ir instantâneo */
}

/* pseudo-selector */
ul li a:hover {
  background: var(--surface-color-hover);
  border: 1.5px solid var(--text-color);
  /* quando vc tiver com o cursor em cima vai ter uma animação, antes do pseudo-selector (na ul li a de cima) voce tem que colocar o transistion para ficar mais suave */
}

/* social links */
#social-links {
  display: flex;
  justify-content: center;

  padding: 24px 0;

  font-size: 24px;
  /* mudando o font-size de todos os elementos do social-links */
}

#social-links a {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 16px;
  border-radius: 50%;

  transition: background 0.2s;
}

#social-links a:hover {
  background: var(--highlight-color);
}

/* Footer */
footer {
  padding: 24px 0;
  text-align: center;
  /* alinhamento de texto */
  font-size: 14px;
  /* textos alinhados ao centro */
}
